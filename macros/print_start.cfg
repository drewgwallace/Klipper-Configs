# PRINT_START PROBE=true EXTRUDER=[first_layer_temperature[initial_tool]] BED=[first_layer_bed_temperature] DWELLCOLD=5 DWELLHOT=0  EXTRUDER_PURGE=line PREHEAT=chamber CHAMBER=[chamber_temperature] BED_FANS=0.50
[gcode_macro PRINT_START]
gcode:

  {% set actual_bed_temp = printer.heater_bed.temperature %}
  {% set x_wait = printer["gcode_macro printer_settings"].x_wait|default(printer.toolhead.axis_maximum.x|float / 2)|float %}
  {% set y_wait = printer["gcode_macro printer_settings"].y_wait|default(printer.toolhead.axis_maximum.y|float / 2)|float %}
  {% set max_external_pc = printer["gcode_macro printer_settings"].max_external_pc|default(1.0)|float %}

  {% set bed_fans = params.BED_FANS|default("0.40")|float %}
  {% set dwell_cold = params.DWELLCOLD|default("15")|int %} 				# Minutes to let printer soak
  {% set dwell_heated = params.DWELLHOT|default("0")|int %} 				# Minutes to let printer soak
  {% set exhaust = params.EXHAUST|default(true)|string|lower %}
  {% set externalpc = params.EXTERNAL_PC|default("0.00")|float %}
  {% set extruder_purge = params.EXTRUDER_PURGE|default("line")|string %}
  {% set preheat_type = params.PREHEAT|default("chamber")|string %}			# Options: chamber, dwell, other
  {% set probe = params.PROBE|default(true)|string %}
  {% set target_bed = params.BED|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set target_extruder = params.EXTRUDER|int %}

  { action_respond_info("print_start exhaust: {0}".format(exhaust)) }

  M106 S0
  EXHAUST_FAN SPEED=0

  LED_ON
  MOTION_SENSOR ENABLE=0 												# disable motion_sensor
  BED_FANS SPEED={bed_fans}
  M140 S{target_bed}                                  					# Sets the target temp for the bed

  G28                   												# Full home (XYZ)
  G90                   												# Absolut position

  {% if probe|lower == 'true' %}
    BED_MESH_CLEAR       												# Clears old saved bed mesh (if any)
  {% endif %}

  M104 S150                                    							# Begin to heat the nozzle to 150c


  {% if target_chamber == 0 %}
    { action_respond_info("target_chamber: {0}, turning on exhaust fan".format(target_chamber | int)) }
    EXHAUST_FAN SPEED=1
  {% else %}
    EXHAUST_FAN SPEED=0
  {% endif %}

  {% if externalpc <= 0.25 %}
    {% if max_external_pc < 0.25 %}
	  EXTERNAL_PC SPEED={max_external_pc}
    {% else %}
	  EXTERNAL_PC SPEED=0.25
    {% endif %}
  {% else %}
    EXTERNAL_PC SPEED={externalpc}
  {% endif %}

  { action_respond_info("preheat_type: {0}".format(preheat_type)) }
  {% if preheat_type|lower == "chamber" %}
    { action_respond_info("target_chamber: {0}".format(target_chamber | int)) }
    SET_DISPLAY_TEXT MSG="Bed ðŸ”¥ to {target_bed}c"          				# Displays info
    M106 S255                                           					# Turns on the PT-fan
    G1 X{x_wait} Y{y_wait} Z15 F9000                    					# Goes to center of the bed
	CHAMBER TEMP={target_chamber}
    M190 S{target_bed}                                  					# Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="Bed heated, will soak to {target_chamber} chamber"  # Displays info

    {% if 'temperature_sensor chamber' in printer %}
      TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
    {% else %}
      {action_respond_info("temperature_sensor chamber does not exist")}
    {% endif %}

    {% if 'heater_generic chamber' in printer %}
      M190 S({target_bed} + 2)                                  					# Sets the target temp for the bed
      TEMPERATURE_WAIT SENSOR="heater_generic chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp
      M190 S{target_bed}                                  					# Sets the target temp for the bed
    {% else %}
      {action_respond_info("heater_generic chamber does not exist")}
    {% endif %}

  {% elif (preheat_type|lower == "dwell" or preheat_type|lower == "bed") %}
    {% if actual_bed_temp >= target_bed - 2 %}								# Determine the bed is preheated
      SET_DISPLAY_TEXT MSG="Bed ðŸ”¥ to {target_bed}c"          				# Displays info
      M106 S255                                           					# Turns on the PT-fan
      G1 X{x_wait} Y{y_wait} Z15 F9000                    					# Goes to center of the bed
      M190 S{target_bed}                                  					# Sets the target temp for the bed
      SET_DISPLAY_TEXT MSG="{target_bed}c bed | {dwell_heated}m soak"  		# Displays info
      { action_respond_info("Bed preheated, will soak for {0} minutes".format(dwell_heated | int)) }
	  G4 P{dwell_heated * 60000}  # Heat soak for X minutes (in milliseconds)
	{% else %}
      SET_DISPLAY_TEXT MSG="Bed ðŸ”¥ to {target_bed}c"          				# Displays info
       M106 S255                                           					# Turns on the PT-fan
      G1 X{x_wait} Y{y_wait} Z15 F9000                    					# Goes to center of the bed
      M190 S{target_bed}                                  					# Sets the target temp for the bed
      { action_respond_info("Bed not heated, will soak for {0} minutes".format(dwell_cold | int)) }
      SET_DISPLAY_TEXT MSG="{target_bed}c bed|{dwell_cold}m soak"           # Displays info#
	  G4 P{dwell_cold * 60000}												# Heat soak for X minutes (in milliseconds)
    {% endif %}

  {% else %}
    SET_DISPLAY_TEXT MSG="Bed to {target_bed}c"          					# Displays info
    M106 S255                                           					# Turns on the PT-fan
    G1 X{x_wait} Y{y_wait} Z15 F9000                    					# Goes to center of the bed
    M190 S{target_bed}                                  					# Sets the target temp for the bed
    SET_DISPLAY_TEXT MSG="{target_bed}c bed"  # Displays info
	{ action_respond_info("Skipping bed soak") }
  {% endif %}

  M109 S150                       											# Ensure hotend preheated for leveling
  EXTERNAL_PC SPEED=0.0

  {% if printer.configfile.settings.z_tilt is defined %}                # Check if the machine trams by tilting Z
    SET_DISPLAY_TEXT MSG="Z_TILT_ADJUST"      							# Displays info
    M106 S0                                           					# Turns off the PT-fan
	G1 Z8 F6000
	G1 X3.5 Y5 F6000													# Move to first Z_TILE_ADJUST probe point
    G4 P5250															# Pause for PZ before beginning probe
    Z_TILT_ADJUST               										# Levels the buildplate via Z_TILT_ADJUST
	#{% set need_tram = True | abs %}                                   #
	#{% set tram_command = 'Z_TILT_ADJUST' %}                           #
  {% elif printer.configfile.settings.quad_gantry_level is defined %}   # Check if the machine trams by tilting the gantry
    SET_DISPLAY_TEXT MSG="QGL"      									# Displays info
	#{% set need_tram = True | abs %}                                    #
	#{% set tram_command = 'QUAD_GANTRY_LEVEL' %}                        #
    QUAD_GANTRY_LEVEL
  {% else %}                                                            #
	{% set need_tram = False | abs %}                                   # If no tramming config found, don't tram
  {% endif %}                                                           #

  G28 Z                           											# Homes Z again

  {% if probe|lower == 'true' %}
    SET_DISPLAY_TEXT MSG="Bed mesh"    										# Displays info
    bed_mesh_calibrate                 										# Starts bed mesh
  {% endif %}

  {% if printer.configfile.config.scanner is defined %}                # Cartographer survey FW
    {% if printer.configfile.config.scanner.mode == "touch" %}                # Cartographer survey FW
      CARTOGRAPHER_TOUCH
    {% else %}
	  { action_respond_info("scanner is not using mode \"touch\"") }
    {% endif %}
  {% endif %}

  G1 X{x_wait} Y{y_wait} Z15 F9000
  EXTERNAL_PC SPEED={externalpc}
  M107                                                      				# Turns off partcooling fan
  M109 S{target_extruder}                                   				# Heats the nozzle to printing temp

  { action_respond_info("extruder_purge: {0}".format(extruder_purge)) }
  {% if extruder_purge|lower == 'bucket' %}
    SET_DISPLAY_TEXT MSG="Mr. Clean"
    { action_respond_info("Will use Purge Bucket") }
    clean_nozzle
  {% elif extruder_purge|lower == 'line' %}
    { action_respond_info("Will use KAMP line purge") }
	LINE_PURGE
  {% else %}
    { action_respond_info("Skipping purge") }
  {% endif %}

  SET_DISPLAY_TEXT MSG="Printer go brrtt"          							# Displays info

  UPDATE_DELAYED_GCODE ID=ENABLE_MOTION_SENSOR DURATION=60 					# enable sensor in 60 seconds

  G21 																		# set units to millimeters
  G90 																		# use absolute coordinates
  M83 																		# use relative distances for extrusion